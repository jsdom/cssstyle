import { Project } from 'ts-morph';
import path from 'path';
import { camelToDashed } from '../lib/parsers';

const LIB_DIRECTORY_PATH = path.resolve(__dirname, '../lib');
const PROPERTIES_INPUT_GLOB = path.resolve(LIB_DIRECTORY_PATH, 'properties/*.ts');
const PROPERTIES_OUTPUT_FILE_PATH = path.resolve(LIB_DIRECTORY_PATH, 'generated/properties.ts');
const IMPLEMENTED_PROPERTIES_OUTPUT_FILE_PATH = path.resolve(
  LIB_DIRECTORY_PATH,
  'generated/implemented-properties.ts'
);

const now = new Date();
const project = new Project();

const propertiesSources = project.addSourceFilesAtPaths(PROPERTIES_INPUT_GLOB);

const propertiesOutputFile = project.createSourceFile(PROPERTIES_OUTPUT_FILE_PATH, '', {
  overwrite: true,
});

propertiesOutputFile.addStatements((writer) => {
  writer.writeLine(
    `// autogenerated - ${now.getMonth() + 1 + '/' + now.getDate() + '/' + now.getFullYear()}`
  );
  writer.writeLine('// https://www.w3.org/Style/CSS/all-properties.en.html');
});

propertiesOutputFile.addImportDeclarations(
  propertiesSources.map((source) => {
    const moduleSpecifier = propertiesOutputFile.getRelativePathTo(source).replace(/\.ts$/, '');
    return {
      moduleSpecifier,
      namespaceImport: `${source.getBaseNameWithoutExtension()}Module`,
    };
  })
);

const prototypeExtender = propertiesOutputFile.addFunction({
  isDefaultExport: true,
  parameters: [{ name: 'prototype', type: 'object' }],
  returnType: 'void',
});
prototypeExtender.setBodyText((writer) => {
  writer.write('Object.defineProperties(prototype, {');
  writer.hangingIndent(() => {
    for (const source of propertiesSources) {
      const propertyFileName = source.getBaseNameWithoutExtension();
      writer.writeLine(`${propertyFileName}: ${propertyFileName}Module.definition,`);
      const dashed = camelToDashed(propertyFileName);
      if (dashed !== propertyFileName) {
        writer.writeLine(`'${dashed}': ${propertyFileName}Module.definition,`);
      }
    }
  });
  writer.write('})');
});

propertiesOutputFile.saveSync();

const implementedPropertiesOutputFile = project.createSourceFile(
  IMPLEMENTED_PROPERTIES_OUTPUT_FILE_PATH,
  '',
  {
    overwrite: true,
  }
);

implementedPropertiesOutputFile.addStatements((writer) => {
  writer.write('export default new Set([');
  writer.hangingIndent(() => {
    for (const source of propertiesSources) {
      writer.writeLine(`'${camelToDashed(source.getBaseNameWithoutExtension())}',`);
    }
  });
  writer.write('])');
});

implementedPropertiesOutputFile.saveSync();

console.log('Done');
